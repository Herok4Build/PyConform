#! /usr/bin/env python
"""
anlzdefs - Analyze Definitions 

Analyzes all definitions in a definitions file or a standardization JSON file

COPYRIGHT: 2017, University Corporation for Atmospheric Research
LICENSE: See the LICENSE.rst file for details
"""

from pyconform import parsing
from json import load
from collections import OrderedDict
from argparse import ArgumentParser
from os.path import exists


#===================================================================================================
# Command-line Interface
#===================================================================================================
def cli(argv=None):
    desc = """This tool will analyze a definitions text file or a JSON standardization
              file and print out the variables needed for each defined output variable."""

    parser = ArgumentParser(description=desc)
    parser.add_argument('-d', '--deffile', default=False, action='store_true',
                        help=('Flag to use if the file to analyze is a definitions file, '
                              'instead of a JSON-formatted standardization file'))
    parser.add_argument('-f', '--filename', default=None, metavar='FILENAME', type=str,
                        help='Name of the file to read and analyze')
    parser.add_argument('variables', metavar='VARIABLE', nargs='*', type=str,
                        help=('Output variables to search for.  If not specified, then '
                              'search for all output variables.'))

    return parser.parse_args(argv)


#===================================================================================================
# variable_search
#===================================================================================================
def variable_search(obj, vars=None):
    if vars is None:
        vars = set()
    if isinstance(obj, parsing.ParsedVariable):
        vars.add(obj.key)
    elif isinstance(obj, parsing.ParsedFunction):
        for arg in obj.args:
            vars = variable_search(arg, vars=vars)
        for kwd in obj.kwds:
            vars = variable_search(obj.kwds[kwd], vars=vars)
    return vars

#===================================================================================================
# Main Script Function
#===================================================================================================
def main(argv=None):
    args = cli(argv)

    # Check that the file exists
    if not exists(args.filename):
        raise OSError('File {!r} not found'.format(args.filename))
    
    # Read the definitions from the file
    vardefs = {}
    if args.deffile:
        with open(args.filename) as f:
            for line in f:
                line = line.strip()
                if '#' in line:
                    line = line.split('#')[0].strip()
                split = line.split('=')
                if len(split) == 2:
                    vardefs[split[0].strip()] = split[1].strip()
                elif len(line)>0 :
                    print 'Could not parse this line: {!r}'.format(line)
    else:
        stddict = load(open(args.filename), object_pairs_hook=OrderedDict)
        for var in stddict:
            if 'definition' in stddict[var]:
                vardefs[var] = stddict[var]['definition']

    # Determine list of output variables to search for
    if len(args.variables) == 0:
        outvars = vardefs.keys()
    else:
        outvars = args.variables

    # Use the parser to determine what variables are needed
    print 'Output Variable Dependencies:'
    alldeps = set()
    for var in outvars:
        if var in vardefs:
            vdeps = variable_search(parsing.parse_definition(vardefs[var]))
            alldeps.update(vdeps)
            print '   {}: {}'.format(var, ', '.join(sorted(vdeps)))
        else:
            print '   {}: Not defined.'.format(var)

    print
    print 'Complete Specification Requires the Following Input Variables:'
    for var in sorted(alldeps):
        print '   {}'.format(var)


#===================================================================================================
# Command-line Operation
#===================================================================================================
if __name__ == '__main__':
    main()
