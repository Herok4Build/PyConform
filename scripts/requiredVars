#! /usr/bin/env python

import os, argparse
import xlsxwriter
from dreqPy import dreq
import cf_units

def parseArgs(argv = None):

    desc = "This tool creates a list of required variables."

    parser = argparse.ArgumentParser(prog='createOutputSpecs',
                                     description=desc)
    parser.add_argument('-d', '--defFile', default=None, type=str,
                        help='A file listing the variable definitions.', required=True)
    parser.add_argument('outputfile', default='out.json', type=str,
                        help='Filename for the output variable lists.')

    return parser.parse_args(argv)


def load(defs):

    # Read in the user supplied definitions file

    def_dict = {}
    for line in defs:
        split = line.split('=')
        if (len(split) == 2):
            def_dict[split[0].strip()] = split[1].strip()
        else:
            if line != '\n':
                print 'Could not parse this line: ',line
    return def_dict


def write_xls(fn, total_request, definitions):

    # Create an excel workbook and setup some formatting
    workbook = xlsxwriter.Workbook(fn)
    header = workbook.add_format({'bold': True, 'font_size': 24})
    bold = workbook.add_format({'bold': True})
    format = workbook.add_format()
    format.set_text_wrap()
    format.set_border(1)
 
    # For each mip table, create a new worksheet and set up header information
    for mt in sorted(total_request):
        worksheet = workbook.add_worksheet(mt)
        worksheet.set_column(0, 0, 20)
        worksheet.set_column(1, 1, 60)
        worksheet.set_column(2, 2, 15)
        worksheet.set_column(3, 3, 40)
        worksheet.set_column(4, 4, 20)
        worksheet.set_column(5, 5, 40)
        worksheet.set_column(6, 6, 80)
        worksheet.write('A1', mt, header)
        worksheet.write('B1', ' # of Variables: '+str(len(total_request[mt])), bold)
        worksheet.write('A2', 'Variable', bold)
        worksheet.write('B2', 'Title', bold)
        worksheet.write('C2', 'Units', bold)
        worksheet.write('D2', 'Dimensions', bold)
        worksheet.write('E2', 'Modeling Realm', bold)
        worksheet.write('F2', 'Requested By', bold)
        worksheet.write('G2', 'Model->CMIP Definition', bold)
        cr = 3
        # For each variable requested, add it's name, official title, 
        # and supply a def if we have one already
        for v in sorted(total_request[mt]):
            worksheet.write('A'+str(cr), v, format)
            worksheet.write('B'+str(cr), total_request[mt][v]['description'], format)
            worksheet.write('C'+str(cr), total_request[mt][v]['units'], format)
            worksheet.write('D'+str(cr), total_request[mt][v]['dimensions'], format)
            worksheet.write('E'+str(cr), total_request[mt][v]['modeling_realm'],format)
            request = ' ,'.join(total_request[mt][v]['req_by'])
            worksheet.write('F'+str(cr), request, format)
            if v in definitions.keys():
                worksheet.write('G'+str(cr), definitions[v], format)
            else: # We don't have a definition, create a border around a blank cell
                worksheet.write('G'+str(cr), '', format)
            cr = cr + 1

    workbook.close()


def main(argv=None):

    dq = dreq.loadDreq()
    total_request = {}
    mips = []
    not_recognized = []

    # Parse args
    args = parseArgs(argv)

    # Open/Read the definition file
    if os.path.isfile(args.defFile):
        with open(args.defFile) as y_definitions:
            definitions = load(y_definitions)
    
    for v in dq.coll['CMORvar'].items:

        if '-copy' not in v.label:
            tab = v.mipTable

            if tab not in total_request.keys():
                total_request[tab] = {}

            if v.label not in total_request[tab].keys():
                total_request[tab][v.label] = {'req_by':[]}

            if v.prov not in total_request[tab][v.label]['req_by']:
                requests = dq.inx.requestVar.label[v.label]
                for r in requests:
                    m = dq.inx.uid[r].mip
                    if 'unset' not in m and 'CMIP5' not in m:
                        total_request[tab][v.label]['req_by'].append(m)
            total_request[tab][v.label]['modeling_realm'] = v.modeling_realm

            v_id = v.uid
            c_var = dq.inx.uid[v_id]

            if hasattr(c_var,'vid'):
                v_var = dq.inx.uid[c_var.vid]
            else:
                print 'Not able to recognize v_var for ', v.label 
                v_var = None
            if hasattr(c_var,'stid'):
                s_var = dq.inx.uid[c_var.stid]
                if hasattr(s_var,'spid'):
                    sp_var = dq.inx.uid[s_var.spid]
                else:
                    sp_var = None
                td = None
                if hasattr(s_var,'tmid'):
                    t_var = dq.inx.uid[s_var.tmid]
                    if hasattr(t_var,'dimensions'):
                        t = t_var.dimensions
                        if t != '' and t != 'None':
                            td = t+'|'
            else:
                print 'Not able to recognize s_var for ', v 
                s_var = None
                sp_var = None
            total_request[tab][v.label]['description'] = c_var.title 
            if 'None' not in c_var.description and c_var.description != '':
                total_request[tab][v.label]['description'] = total_request[tab][v.label]['description'] + ': ' + c_var.description
            if hasattr(v_var,'units'):
                total_request[tab][v.label]['units'] = v_var.units
                try:
                    cf_units.Unit(v_var.units)
                except ValueError:
                    print v_var.units, ' is not a cf-compliant unit'
                    total_request[tab][v.label]['units'] = total_request[tab][v.label]['units'] + '(not cf-compliant)'
            else:
                total_request[tab][v.label]['units'] = 'No units listed'
            if hasattr(sp_var, 'dimensions'):
                if td != None:
                    total_request[tab][v.label]['dimensions'] = td + sp_var.dimensions
                else:
                    total_request[tab][v.label]['dimensions'] = sp_var.dimensions 
            else:
                total_request[tab][v.label]['dimensions'] = 'No dimensions listed'


    # Write out the xls spreadsheet
    write_xls(args.outputfile, total_request, definitions)

#    for mt in total_request.keys():
#        print '#############################################'
#        print '\ntable:', mt, 'len: ',len(total_request[mt])
#        for v in total_request[mt].keys():
#            if v in definitions.keys():
#                d = definitions[v]
#            else:
#                d = ''
#            print v,'|',total_request[mt][v],'|',d 


if __name__ == '__main__':
    main()
