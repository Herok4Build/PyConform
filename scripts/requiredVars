#! /usr/bin/env python

import os, argparse
import xlsxwriter
import dreq

def parseArgs(argv = None):

    desc = "This tool creates a list of required variables."

    parser = argparse.ArgumentParser(prog='createOutputSpecs',
                                     description=desc)
    parser.add_argument('-d', '--defFile', default=None, type=str,
                        help='A file listing the variable definitions.', required=True)
    parser.add_argument('outputfile', default='out.json', type=str,
                        help='Filename for the output variable lists.')

    return parser.parse_args(argv)


def load(defs):

    # Read in the user supplied definitions file

    def_dict = {}
    for line in defs:
        split = line.split('=')
        if (len(split) == 2):
            def_dict[split[0].strip()] = split[1].strip()
        else:
            if line != '\n':
                print 'Could not parse this line: ',line
    return def_dict


def write_xls(fn, total_request, request_by, definitions):

    # Create an excel workbook and setup some formatting
    workbook = xlsxwriter.Workbook(fn)
    header = workbook.add_format({'bold': True, 'font_size': 24})
    bold = workbook.add_format({'bold': True})
    format = workbook.add_format()
    format.set_text_wrap()
    format.set_border(1)
 
    # For each mip table, create a new worksheet and set up header information
    for mt in sorted(total_request):
        worksheet = workbook.add_worksheet(mt)
        worksheet.set_column(0, 0, 20)
        worksheet.set_column(1, 1, 40)
        worksheet.set_column(2, 2, 15)
        worksheet.set_column(3, 4, 40)
        worksheet.write('A1', mt, header)
        worksheet.write('B1', ' # of Variables: '+str(len(total_request[mt])), bold)
        worksheet.write('A2', 'Variable', bold)
        worksheet.write('B2', 'Title', bold)
        worksheet.write('C2', 'Units', bold)
        worksheet.write('D2', 'Dimensions', bold)
        worksheet.write('E2', 'Model->CMIP Definition', bold) 
        cr = 3
        # For each variable requested, add it's name, official title, 
        # and supply a def if we have one already
        for v in sorted(total_request[mt]):
            worksheet.write('A'+str(cr), v, format)
            var_info = total_request[mt][v].split('-----')
            worksheet.write('B'+str(cr), var_info[0], format)
            worksheet.write('C'+str(cr), var_info[1], format)
            worksheet.write('D'+str(cr), var_info[2], format)
            if v in definitions.keys():
                worksheet.write('E'+str(cr), definitions[v], format)
            else: # We don't have a definition, create a border around a blank cell
                worksheet.write('E'+str(cr), '', format)
            cr = cr + 1
        # List each mip that requested this table
        cr = 3
        worksheet.write('F2', 'Requested by:', bold)
        for m in request_by[mt]:
            worksheet.write('F'+str(cr), m)
            cr = cr + 1    

    workbook.close()


def main(argv=None):

    dq = dreq.loadDreq()
    total_request = {}
    mips = []
    request_by = {}
    not_recognized = []

    # Parse args
    args = parseArgs(argv)

    # Open/Read the definition file
    if os.path.isfile(args.defFile):
        with open(args.defFile) as y_definitions:
            definitions = load(y_definitions)
    
    for v in dq.coll['CMORvar'].items:

        tab = v.mipTable
        if tab not in request_by.keys():
            request_by[tab] = []
        if v.prov not in request_by[tab]:
            request_by[tab].append(v.prov)

        if tab not in total_request.keys():
            total_request[tab] = {}

        v_id = v.uid  
        c_var = dq.inx.uid[v_id]
        if hasattr(c_var,'vid'):
            v_var = dq.inx.uid[c_var.vid]
        else:
            print 'Not able to recognize v_var for ', v.label 
            v_var = None
        if hasattr(c_var,'stid'):
            s_var = dq.inx.uid[c_var.stid]
            if hasattr(s_var,'spid'):
                sp_var = dq.inx.uid[s_var.spid]
            else:
                sp_var = None
            td = None
            if hasattr(s_var,'tmid'):
                t_var = dq.inx.uid[s_var.tmid]
                if hasattr(t_var,'dimensions'):
                    t = t_var.dimensions
                    if t != '' and t != 'None':
                        td = t+'|'
        else:
            print 'Not able to recognize s_var for ', v 
            s_var = None
            sp_var = None
        request = c_var.title
        if hasattr(v_var,'units'):
            request = request + '-----' + v_var.units
        else:
            request = request + '----- No units listed'
        if hasattr(sp_var, 'dimensions'):
            if td != None:
                request = request + '-----' + td + sp_var.dimensions
            else:
                request = request + '-----' + sp_var.dimensions 
        else:
            request = request + '----- No dimensions listed)'
        if '-copy' not in v.label:
            total_request[tab][v.label] = request

#    for mt in request_by.keys():    
#        print '\ntable:', mt, request_by[mt], 'len: ',len(request_by[mt])

    # Write out the xls spreadsheet
    write_xls(args.outputfile, total_request, request_by, definitions)

#    for mt in total_request.keys():
#        print '#############################################'
#        print '\ntable:', mt, 'len: ',len(total_request[mt])
#        for v in total_request[mt].keys():
#            if v in definitions.keys():
#                d = definitions[v]
#            else:
#                d = ''
#            print v,'|',total_request[mt][v],'|',d 


if __name__ == '__main__':
    main()
